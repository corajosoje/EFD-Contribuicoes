package br.com.jefferson.efd;//MainFrame

import br.com.jefferson.efd.exception.LeitorExeption;
import br.com.jefferson.efd.processamento.DaoRegistro;
import br.com.jefferson.efd.util.ObjectFactory;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import javax.persistence.EntityManager;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * @version 1.0
 * @author Jefferson Oliveira
 */
public class MainFrame extends javax.swing.JFrame {

    private static final Logger log = LogManager.getLogger(MainFrame.class.getName());
    private File arquivos[] = null;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jProgressBar2 = new javax.swing.JProgressBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("EFD-Fiscal");

        jProgressBar1.setString("0 de 0");
        jProgressBar1.setStringPainted(true);

        jLabel1.setText("Arquivos:");

        jLabel2.setText("Registros:");

        jProgressBar2.setString("0 de 0");
        jProgressBar2.setStringPainted(true);

        jButton1.setText("Selecionar EFD");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Iniciar processamento");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jProgressBar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addContainerGap(343, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser chosser = new JFileChooser();
        chosser.setFileFilter(new FileNameExtensionFilter("Arquivos txt", "txt"));
        chosser.setDialogTitle("Arquivos EFD-ICMS");
        chosser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chosser.setMultiSelectionEnabled(true);

        int i = chosser.showOpenDialog(null);
        if (i == JFileChooser.APPROVE_OPTION) {
            arquivos = chosser.getSelectedFiles();
            jProgressBar1.setString("0 de " + arquivos.length);
        } else {
            arquivos = null;
            jProgressBar1.setString("0 de 0");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (arquivos == null || arquivos.length == 0) {
            JOptionPane.showMessageDialog(rootPane, "Selecione os Arquivos EFD", "Arquivos EFD-ICMS", JOptionPane.INFORMATION_MESSAGE);
        } else {

            Thread r = new Thread(new Runnable() {
                @Override
                public void run() {

                    log.trace("Iniciando o processo de " + arquivos.length + " arquivos");
                    jProgressBar1.setMaximum(arquivos.length);

                    for (int i = 0; i < arquivos.length; i++) {
                        jProgressBar1.setString((i + 1) + " de " + arquivos.length);
                        jProgressBar1.setValue(i + 1);
                        try {
                            EntityManager entityManager = ObjectFactory.getEntityManager();

                            log.trace("Iniciando Reader");

                            BufferedReader reader = new BufferedReader(new FileReader(arquivos[i]));
                            int count = (int) reader.lines().count();
                            log.trace("Processando " + count + " linhas do arquivo " + arquivos[i].getName());
                            jProgressBar2.setString("0 de " + count);
                            jProgressBar2.setMaximum(count);

                            log.trace("Iniciando Manager");
                            DaoRegistro registro = new DaoRegistro(entityManager);
                            String hashCode = getHash(arquivos[i]);
                            reader = new BufferedReader(new FileReader(arquivos[i]));
                            String conteudo = reader.readLine();
                            int linha = 1;

                            log.trace("Primeira linha: " + conteudo);
                            log.trace("Iniciando transação");
                            entityManager.getTransaction().begin();
                            while (true) {
                                if (conteudo != null) {
                                    log.trace("Linha: " + linha + " - Registro: " + conteudo);
                                    jProgressBar2.setString(linha + " de " + count);
                                    jProgressBar2.setValue(linha);
                                    registro.persist(conteudo, hashCode, linha);

                                } else {
                                    break;
                                }
                                conteudo = reader.readLine();
                                linha++;
                            }
                            log.trace("Processo finalizado");

                            entityManager.getTransaction().commit();

                            log.trace("Fechando Manager");
                            entityManager.close();
                        } catch (Exception ex) {
                            log.error("Não foi possivel ler arquivo " + arquivos[i].getAbsolutePath(), ex);
                        }

                    }//for (int i = 0; i < arquivos.length; i++) {
                    JOptionPane.showMessageDialog(rootPane, "Processamento concluido");
                }
            });
            r.start();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private String getHash(File arquivo) {
        log.trace("Gerando hash");
        try {
            MessageDigest digest = MessageDigest.getInstance("MD5");

            InputStream is = new FileInputStream(arquivo);
            byte[] buffer = new byte[8192];
            int read = 0;
            while ((read = is.read(buffer)) > 0) {
                digest.update(buffer, 0, read);
            }
            byte[] md5sum = digest.digest();
            BigInteger bigInt = new BigInteger(1, md5sum);
            String output = bigInt.toString(16);
            log.trace("MD5: " + output);
            try {
                is.close();
            } catch (IOException e) {
                //throw new RuntimeException("Unable to close input stream for MD5 calculation", e);
            }
            log.debug("Hash Code gerado: " + output);
            return output;
        } catch (IOException | NoSuchAlgorithmException e) {
            throw new LeitorExeption("Unable to process file for MD5", e);
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JProgressBar jProgressBar1;
    public javax.swing.JProgressBar jProgressBar2;
    // End of variables declaration//GEN-END:variables

}
